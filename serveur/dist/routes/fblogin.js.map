{"version":3,"sources":["../../routes/fblogin.js"],"names":["axios","require","express","router","Router","querystring","facebookdata","db","squelb","sender","squel","useFlavour","_sendResponse","status","message","res","send","_getUserAccessToken","str","requestToken","redirectURI","client_id","redirect_uri","client_secret","code","get","_getAppAccessToken","apiAppRequest","requestAPI","grant_type","_inspectUserToken","inspectTokenRequest","input_token","userAccessToken","access_token","appAccessToken","_checkIfUserExists","user_id","query","select","from","where","toString","_insertNewUser","userlastname","userfirstname","insert","into","set","_getUserDataFromFb","userData","uri","_bindLoggedUserData","responseFromfb","loggedUser","prenom","first_name","nom","last_name","photo","picture","iduser","userFbId","req","next","console","log","facebookURI","scope","SUCCESS_STATUS","parse","originalUrl","substring","indexOf","length","then","response","data","catch","error","existingUser","post","body","token","userId","NOT_FOUND_STATUS","e","module","exports"],"mappings":"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","file":"fblogin.js","sourcesContent":["const axios = require('axios');\r\nconst express = require('express');\r\nconst router = express.Router();\r\nconst querystring = require('querystring');\r\nconst facebookdata = require(\"../facebookdata\");\r\n\r\nconst db = require('../connection');\r\nconst squelb = require('squel');\r\nconst sender = require(\"../sender\");\r\nconst squel = squelb.useFlavour('postgres');\r\n\r\nconst _sendResponse = (status, message, res) => {\r\n    res.status(status);\r\n    res.send(message);\r\n};\r\n\r\nconst _getUserAccessToken = (str) => {\r\n    let requestToken = {\r\n        redirectURI: 'https://graph.facebook.com/v2.11/oauth/access_token?',\r\n        client_id: '137357800216709',\r\n        redirect_uri: 'http://localhost:3000/handleauth',\r\n        client_secret: '8120bf1c2ce2729a20d024a8c491c9b5',\r\n        code: str.code\r\n    };\r\n\r\n    return axios.get(requestToken.redirectURI + 'client_id=' + requestToken.client_id + '&redirect_uri=' + requestToken.redirect_uri\r\n        + '&client_secret=' + requestToken.client_secret + '&code=' + requestToken.code)\r\n};\r\n\r\nconst _getAppAccessToken = () => {\r\n\r\n    const apiAppRequest = {\r\n        requestAPI: 'https://graph.facebook.com/oauth/access_token?',\r\n        client_id: '137357800216709',\r\n        client_secret: '8120bf1c2ce2729a20d024a8c491c9b5',\r\n        grant_type: 'client_credentials'\r\n    };\r\n\r\n    return axios.get(apiAppRequest.requestAPI + 'client_id=' + apiAppRequest.client_id + '&client_secret='\r\n        + apiAppRequest.client_secret + '&grant_type=' + apiAppRequest.grant_type)\r\n};\r\n\r\nconst _inspectUserToken = () => {\r\n    let inspectTokenRequest = {\r\n        redirectURI: 'https://graph.facebook.com/debug_token?',\r\n        input_token: facebookdata.userAccessToken,\r\n        access_token: facebookdata.appAccessToken\r\n    };\r\n\r\n    return axios.get(inspectTokenRequest.redirectURI + 'input_token=' + inspectTokenRequest.input_token + '&access_token=' + inspectTokenRequest.access_token)\r\n};\r\n\r\nconst _checkIfUserExists = (user_id) => {\r\n    return db.query(squel\r\n        .select()\r\n        .from('\"USER\"')\r\n        .where('iduser = ?', user_id)\r\n        .toString())\r\n};\r\n\r\nconst _insertNewUser = (user_id, userlastname, userfirstname) => {\r\n    return db.query(squel\r\n        .insert()\r\n        .into('\"USER\"')\r\n        .set('iduser', user_id)\r\n        .set('nom', userlastname)\r\n        .set('prenom', userfirstname)\r\n        .toString())\r\n};\r\n\r\nconst _getUserDataFromFb = (user_id) => {\r\n    let userData = {\r\n        uri: 'https://graph.facebook.com/v2.11/',\r\n        user_id: user_id,\r\n        access_token: facebookdata.userAccessToken\r\n    };\r\n\r\n    return axios.get(userData.uri + userData.user_id + '?access_token=' + userData.access_token + '&fields=id,last_name,first_name,gender,picture');\r\n};\r\n\r\nconst _bindLoggedUserData = (responseFromfb) => {\r\n    loggedUser.prenom = responseFromfb.first_name;\r\n    loggedUser.nom = responseFromfb.last_name;\r\n    loggedUser.photo = responseFromfb.picture;\r\n    loggedUser.iduser = facebookdata.userFbId\r\n}\r\n\r\nlet loggedUser = {\r\n    nom: '',\r\n    prenom: '',\r\n    iduser: '',\r\n    photo: ''\r\n};\r\n\r\nrouter.get('/', function (req, res, next) {\r\n    console.log(\"GET /fblogin\");\r\n\r\n    let facebookURI = {\r\n        redirectURI: 'https://www.facebook.com/v2.11/dialog/oauth?',\r\n        client_id: '137357800216709',\r\n        redirect_uri: 'http://localhost:3000/handleauth',\r\n        scope: 'email,user_friends'\r\n    };\r\n\r\n    _sendResponse(sender.SUCCESS_STATUS, facebookURI, res)\r\n\r\n    console.log(\"end GET /fblogin\");\r\n});\r\n\r\nrouter.get('/handleauth', function (req, res, next) {\r\n    console.log(\"GET /fblogin/handleauth\");\r\n\r\n    let str = querystring.parse(req.originalUrl.substring(req.originalUrl.indexOf(\"?\") + 1, req.originalUrl.length));\r\n\r\n    console.log('STR VALUE :' + str.code);\r\n\r\n    _getUserAccessToken(str)\r\n        .then(response => {\r\n\r\n            facebookdata.userAccessToken = response.data.access_token;\r\n\r\n            _getAppAccessToken()\r\n                .then(response => {\r\n\r\n                    facebookdata.appAccessToken = response.data.access_token;\r\n\r\n                    _inspectUserToken()\r\n                        .then(response => {\r\n                            facebookdata.userFbId = response.data.data.user_id;\r\n\r\n                            _getUserDataFromFb(facebookdata.userFbId)\r\n                                .then(response => {\r\n                                    _bindLoggedUserData(response.data);\r\n                                })\r\n                                .catch(error => {\r\n                                    console.log(error);\r\n                                });\r\n\r\n                            _checkIfUserExists(facebookdata.userFbId)\r\n                                .then(existingUser => {\r\n\r\n                                    if (existingUser.length === 0) {\r\n                                        console.log('User does not exist. Creating user with facebook ID : ' + facebookdata.userFbId);\r\n\r\n                                        _insertNewUser(facebookdata.userFbId, loggedUser.nom, loggedUser.prenom);\r\n\r\n                                        _sendResponse(sender.SUCCESS_STATUS, loggedUser, res);\r\n                                    } else {\r\n                                        console.log('User with ID : ' + facebookdata.userFbId + 'already exists in database');\r\n\r\n                                        _sendResponse(sender.SUCCESS_STATUS, loggedUser, res);\r\n                                    }\r\n                                })\r\n                                .catch(error => {\r\n                                    console.log(error);\r\n                                });\r\n                        })\r\n                        .catch(error => {\r\n                            console.log(error);\r\n                        });\r\n                })\r\n                .catch(error => {\r\n                    console.log(error)\r\n                });\r\n        })\r\n        .catch(error => {\r\n            console.log(error)\r\n        });\r\n\r\n    console.log(\"end GET /fblogin/handleauth\");\r\n});\r\n\r\nrouter.post('/authAndroid', function (req, res) {\r\n\r\n    facebookdata.userAccessToken = req.body.token;\r\n    facebookdata.userFbId = req.body.userId;\r\n\r\n    _getAppAccessToken()\r\n        .then(response => {\r\n\r\n            facebookdata.appAccessToken = response.data.access_token;\r\n\r\n            _getUserDataFromFb(facebookdata.userFbId)\r\n                .then(response => {\r\n                    _bindLoggedUserData(response.data);\r\n\r\n                    _checkIfUserExists(facebookdata.userFbId)\r\n                        .then(existingUser => {\r\n\r\n                            if (existingUser.length === 0) {\r\n                                console.log('User does not exist. Creating user with facebook ID : ' + facebookdata.userFbId);\r\n\r\n                                _insertNewUser(facebookdata.userFbId, loggedUser.nom, loggedUser.prenom);\r\n\r\n                                _sendResponse(sender.SUCCESS_STATUS, loggedUser, res);\r\n                            } else {\r\n                                console.log('User with ID : ' + facebookdata.userFbId + 'already exists in database');\r\n\r\n                                _sendResponse(sender.SUCCESS_STATUS, loggedUser, res);\r\n                            }\r\n                        })\r\n                        .catch(error => {\r\n                            console.log(error);\r\n\r\n                            _sendResponse(sender.NOT_FOUND_STATUS, 'error while getting existing user', res);\r\n                        });\r\n                })\r\n                .catch(error => {\r\n                    console.log(error);\r\n\r\n                    _sendResponse(sender.NOT_FOUND_STATUS, 'error while binding user data', res);\r\n                });\r\n        })\r\n        .catch(e => {\r\n            console.log('Android auth error ' + e);\r\n\r\n            _sendResponse(sender.NOT_FOUND_STATUS, 'error while getting app token', res);\r\n        })\r\n});\r\n\r\nmodule.exports = router;"]}