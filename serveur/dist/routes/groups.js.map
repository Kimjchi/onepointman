{"version":3,"sources":["../../routes/groups.js"],"names":["express","require","router","Router","db","squelb","squel","useFlavour","get","req","res","iduser","params","groups","getUsersInGroups","any","then","tableau","toReturn","buildGroupsObject","send","status","message","sender","sendResponse","SUCCESS_STATUS","catch","e","toString","NOT_FOUND_STATUS","getGroups","select","from","field","where","left_join","queryResult","forEach","element","index","contains","idPosition","idgroup","grelement","push","nomgroup","membres","idGroupeConcerne","grindex","prenom","nomuser","console","log","module","exports"],"mappings":"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","file":"groups.js","sourcesContent":["const express = require('express');\r\nconst router = express.Router();\r\nconst db = require('../connection');\r\nconst squelb = require('squel');\r\nconst squel = squelb.useFlavour('postgres');\r\n\r\n//donne les groupes auxquels appartient un utilisateur + les membres du groupe\r\nrouter.get('/:iduser/', function (req, res) {\r\n    let iduser = req.params.iduser;\r\n    let groups = getUsersInGroups(iduser);\r\n    db.any(groups)\r\n        .then((tableau) => {\r\n            let toReturn = buildGroupsObject(tableau);\r\n            res.send({\r\n                status: 'success',\r\n                message: toReturn\r\n            });\r\n            sender.sendResponse(sender.SUCCESS_STATUS, toReturn, res);\r\n\r\n        })\r\n        .catch(e => {\r\n            res.send({\r\n                status: 'fail',\r\n                message: e.toString()\r\n            })\r\n            sender.sendResponse(sender.NOT_FOUND_STATUS, toReturn, res);\r\n        });\r\n\r\n});\r\n\r\nlet getGroups = (iduser) =>\r\n    squel.select()\r\n        .from('public.\"USER_GROUP\"', 'ugr')\r\n        .field('ugr.idgroup')\r\n        .field('gr.nom')\r\n        .where('ugr.iduser = ?', iduser)\r\n        .left_join('public.\"GROUP\"', 'gr', 'ugr.idgroup = gr.idgroup')\r\n;\r\n\r\nlet getUsersInGroups = (iduser) =>\r\n    squel.select()\r\n        .from(getGroups(iduser), 'listgroups')\r\n        .left_join('public.\"USER_GROUP\"', 'ugr', 'ugr.idgroup = listgroups.idgroup')\r\n        .left_join('public.\"USER\"', 'usr', 'usr.iduser = ugr.iduser')\r\n        .field('usr.prenom')\r\n        .field('usr.nom', 'nomuser')\r\n        .field('usr.iduser')\r\n        .field('listgroups.nom', 'nomgroup')\r\n        .field('ugr.idgroup')\r\n        .toString();\r\n\r\nfunction buildGroupsObject(queryResult) {\r\n    var groups = [];\r\n    queryResult.forEach((element, index) => {\r\n        // le resultat de la requete donne un tableau de {prenom, nomuser, iduser, nomgroup, idgroup}\r\n        let contains = false;\r\n        let idPosition;\r\n        // si l'id du groupe n'existe pas encore dans le tableau, on le push et on crée un ligne pour le groupe\r\n        groups.forEach(grelement => {\r\n            if (element.idgroup === grelement.idgroup) {\r\n                contains = true;\r\n                idPosition = index;\r\n            }\r\n        });\r\n        if (!contains) {\r\n            groups.push({idgroup: element.idgroup, nomgroup: element.nomgroup, membres: []})\r\n        }\r\n    });\r\n    //une fois le tableau des groupes créé, on push les membres dans groups[idGroupConcerné].membres\r\n    queryResult.forEach((element) => {\r\n        let idGroupeConcerne;\r\n        //on get la position dans groups du groupe concerné pour l'user (element)\r\n        groups.forEach((grelement, grindex) => {\r\n            if (grelement.idgroup === element.idgroup) {\r\n                idGroupeConcerne = grindex;\r\n                groups[idGroupeConcerne].membres.push({\r\n                    iduser: element.iduser,\r\n                    prenom: element.prenom,\r\n                    nomuser: element.nomuser\r\n                });\r\n            }\r\n            console.log(groups[grindex].membres);\r\n        })\r\n    });\r\n    return groups;\r\n\r\n}\r\n\r\n// les infos d'un groupe en particulier\r\nrouter.get('/:iduser/:idgroup', function (req, res) {\r\n    let iduser = req.params.iduser;\r\n    let idgroup = req.params.idgroup;\r\n\r\n    console.log(iduser + \" \" + idgroup);\r\n});\r\n\r\nmodule.exports = router;"]}