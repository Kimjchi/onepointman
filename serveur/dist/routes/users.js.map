{"version":3,"sources":["../../routes/users.js"],"names":["express","require","router","Router","axios","db","squelb","squel","useFlavour","sender","facebookdata","get","req","res","next","send","userAccessToken","post","toUpdate","iduser","body","userlg","userlt","getGroups","select","from","field","where","parseInt","toString","any","then","groups","console","log","forEach","currentdate","Date","toISOString","element","sharesposition","query","update","table","set","none","idgroup","catch","status","message","e","positionSharing","sendResponse","SUCCESS_STATUS","NOT_FOUND_STATUS","delete","user_id","params","userFriendList","_getUserFriendList","response","data","error","userFriendListRequest","redirectURI","userID","module","exports"],"mappings":"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","file":"users.js","sourcesContent":["var express = require('express');\r\nvar router = express.Router();\r\nconst axios = require('axios');\r\n\r\nconst db = require('../connection');\r\nconst squelb = require('squel');\r\nconst squel = squelb.useFlavour('postgres');\r\n\r\nconst sender = require('../sender');\r\nconst facebookdata = require(\"../facebookdata\");\r\n\r\n/* GET users listing. */\r\nrouter.get('/', function (req, res, next) {\r\n    res.send('respond with a resource user id :' + facebookdata.userAccessToken);\r\n});\r\n\r\nrouter.post(('/updateposition'), function (req, res) {\r\n\r\n    let toUpdate = {\r\n        iduser: req.body.iduser,\r\n        userlg: req.body.userlg,\r\n        userlt: req.body.userlt,\r\n    };\r\n\r\n    let getGroups = squel.select()\r\n        .from('public.\"USER_GROUP\"', 'ugr')\r\n        .field('ugr.idgroup')\r\n        .field('ugr.sharesposition')\r\n        .where('ugr.iduser = ?', parseInt(toUpdate.iduser, 10))\r\n        .toString();\r\n    db.any(getGroups)\r\n        .then((groups) => {\r\n            console.log(groups);\r\n            groups.forEach(element => {\r\n                //pour chaque groupe, s'il décide de partager sa position avec, on update sa position\r\n                let currentdate = new Date();\r\n                console.log(currentdate);\r\n                console.log(currentdate.toISOString());\r\n                if (element.sharesposition === true) {\r\n                    console.log(\"CRAZY DIAMOND\");\r\n                    let query = squel.update()\r\n                        .table('public.\"USER_GROUP\"')\r\n                        .set('userglt', toUpdate.userlt)\r\n                        .set('userglg', toUpdate.userlg)\r\n                        .set('dateposition', currentdate.toISOString())\r\n                        .where('iduser = ?', toUpdate.iduser)\r\n                        .toString();\r\n                    console.log(query);\r\n                    db.none(query)\r\n                        .then(() => {\r\n                            console.log('Updated position of user in group ' + element.idgroup);\r\n                        })\r\n                        .catch(e => {\r\n                            res.status(400);\r\n                            res.send({\r\n                                status: 'fail',\r\n                                message: 'failing to update userposition in a group'\r\n                            })\r\n                        })\r\n                }\r\n            })\r\n            res.send({\r\n                status: 'success',\r\n                message: 'Position updated successfully'\r\n            })\r\n        })\r\n        .catch(e => {\r\n            res.status(400);\r\n            res.send({\r\n                status: 'fail',\r\n                message: e.toString()\r\n            })\r\n            //sender gnagnanga\r\n        });\r\n\r\n    /* let query = squel.update()\r\n         .table('public.\"USER\"')\r\n         .set('userlt', toUpdate.userlt)\r\n         .set('userlg', toUpdate.userlg)\r\n         .where('iduser = ?', toUpdate.iduser)\r\n         .toString();\r\n     console.log(query);\r\n     db.none(query)\r\n         .then(() => {\r\n             res.send({\r\n                 status: 'success',\r\n                 message: \"La position a été mise à jour avec succès \"\r\n             });\r\n             //sender blablabla\r\n         })\r\n         .catch(e => {\r\n             res.status(400);\r\n             res.send({\r\n                 status: 'fail',\r\n                 message: e.toString()\r\n             })\r\n             //sender gnagnanga\r\n         });*/\r\n\r\n});\r\n\r\nrouter.post(('/updatepositionsharing'), function(req, res){\r\n\r\n    let toUpdate = {\r\n        iduser : req.body.iduser,\r\n        idgroup : req.body.idgroup,\r\n        positionSharing : req.body.positionSharing,\r\n    };\r\n\r\n    let query = squel.update()\r\n        .table('public.\"USER_GROUP\"')\r\n        .set('sharesposition', toUpdate.positionSharing)\r\n        .where('iduser = ?', toUpdate.iduser)\r\n        .where('idgroup = ?', toUpdate.idgroup)\r\n        .toString();\r\n\r\n    db.query(query)\r\n        .then(()=>{\r\n            sender.sendResponse(sender.SUCCESS_STATUS, 'Position sharing updated successfully', res)\r\n        })\r\n        .catch(e => {\r\n            sender.sendResponse(sender.NOT_FOUND_STATUS, e, res);\r\n            console.log(e);\r\n        })\r\n});\r\n\r\nrouter.get(('/deleteuser'), function(req, res){\r\n\r\n    let toUpdate = {\r\n        iduser : req.query.iduser,\r\n        idgroup : req.query.idgroup,\r\n    };\r\n\r\n    let query = squel.delete()\r\n        .from('public.\"USER_GROUP\"')\r\n        .where('iduser = ?', toUpdate.iduser)\r\n        .where('idgroup = ?', toUpdate.idgroup)\r\n        .toString();\r\n\r\n    db.query(query)\r\n        .then(()=>{\r\n            sender.sendResponse(sender.SUCCESS_STATUS, 'User deleted from group successfully', res)\r\n        })\r\n        .catch(e => {\r\n            sender.sendResponse(sender.NOT_FOUND_STATUS, e, res);\r\n            console.log(e);\r\n        })\r\n});\r\n\r\nrouter.get('/userFriends/:user_id/', function (req, res) {\r\n    console.log(\"GET /userFriends/:user_id/\");\r\n\r\n    let user_id = req.params.user_id;\r\n    let userFriendList;\r\n\r\n    _getUserFriendList(user_id)\r\n        .then(response => {\r\n            userFriendList = response.data.data;\r\n\r\n            console.log('userFriendList : ' + userFriendList);\r\n\r\n            sender.sendResponse(sender.SUCCESS_STATUS, userFriendList, res)\r\n        })\r\n        .catch(error => {\r\n        console.log(error)\r\n    });\r\n});\r\n\r\nconst _getUserFriendList = (user_id) => {\r\n    let userFriendListRequest = {\r\n        redirectURI: 'https://graph.facebook.com/v2.11/',\r\n        userAccessToken: facebookdata.userAccessToken,\r\n        userID: user_id\r\n    };\r\n\r\n    return axios.get(userFriendListRequest.redirectURI + userFriendListRequest.userID + '/friends?access_token=' + userFriendListRequest.userAccessToken)\r\n};\r\n\r\nmodule.exports = router;\r\n"]}