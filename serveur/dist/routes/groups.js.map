{"version":3,"sources":["../../routes/groups.js"],"names":["express","require","router","Router","db","squelb","squel","useFlavour","sender","get","req","res","iduser","params","groups","getUsersInGroups","any","then","tableau","toReturn","buildGroupsObject","send","status","message","catch","e","toString","getGroups","select","from","field","where","left_join","queryResult","forEach","element","index","contains","idPosition","idgroup","grelement","push","issharing","sharesposition","nomgroup","membres","idGroupeConcerne","grindex","prenom","nomuser","parseInt","requete","getGroupPinpoints","result","JSONToReturn","pinpoints","userpositions","currentTime","Date","diff","daterdv","dontPush","console","log","pinpoint","idpinpoint","idcreator","nomcreator","nom","prenomcreator","pinlt","pinlg","description","getUsersPositions","currentDate","userCorrectRequest","isCurrent","dateposition","compareTimes","userposition","userlt","userglt","userlg","userglg","current","err","lastLocationTime","getMonth","getDay","getHours","getMinutes","query","getDrawings","drawings","objectToPush","iddrawing","lt","lg","img","actif","post","toCreate","body","groupname","insert","into","set","toISOString","returning","one","row","inUserGroup","none","response","sendResponse","SUCCESS_STATUS","BAD_REQUEST","toChange","newgroupname","update","table","module","exports"],"mappings":"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","file":"groups.js","sourcesContent":["const express = require('express');\r\nconst router = express.Router();\r\nconst db = require('../connection');\r\nconst squelb = require('squel');\r\nconst squel = squelb.useFlavour('postgres');\r\n\r\nconst sender = require('../sender');\r\n\r\n//donne les groupes auxquels appartient un utilisateur + les membres du groupe\r\nrouter.get('/:iduser/', function (req, res) {\r\n    let iduser = req.params.iduser;\r\n    let groups = getUsersInGroups(iduser);\r\n    db.any(groups)\r\n        .then((tableau) => {\r\n            let toReturn = buildGroupsObject(tableau);\r\n            res.send({\r\n                status: 'success',\r\n                message: toReturn\r\n            });\r\n            //sender.sendResponse(sender.SUCCESS_STATUS, toReturn, res);\r\n\r\n        })\r\n        .catch(e => {\r\n            res.status(400);\r\n            res.send({\r\n                status: 'fail',\r\n                message: e.toString()\r\n            });\r\n            //sender.sendResponse(sender.BAD_REQUEST, toReturn, res);\r\n        });\r\n\r\n});\r\n\r\nlet getGroups = (iduser) =>\r\n    squel.select()\r\n        .from('public.\"USER_GROUP\"', 'ugr')\r\n        .field('ugr.idgroup')\r\n        .field('gr.nom')\r\n        .field('ugr.sharesposition')\r\n        .where('ugr.iduser = ?', iduser)\r\n        .left_join('public.\"GROUP\"', 'gr', 'ugr.idgroup = gr.idgroup')\r\n;\r\n\r\nlet getUsersInGroups = (iduser) =>\r\n    squel.select()\r\n        .from(getGroups(iduser), 'listgroups')\r\n        .left_join('public.\"USER_GROUP\"', 'ugr', 'ugr.idgroup = listgroups.idgroup')\r\n        .left_join('public.\"USER\"', 'usr', 'usr.iduser = ugr.iduser')\r\n        .field('listgroups.sharesposition')\r\n        .field('usr.prenom')\r\n        .field('usr.nom', 'nomuser')\r\n        .field('usr.iduser')\r\n        .field('listgroups.nom', 'nomgroup')\r\n        .field('ugr.idgroup')\r\n        .toString();\r\n\r\nfunction buildGroupsObject(queryResult) {\r\n    var groups = [];\r\n    queryResult.forEach((element, index) => {\r\n        // le resultat de la requete donne un tableau de {prenom, nomuser, iduser, nomgroup, idgroup}\r\n        let contains = false;\r\n        let idPosition;\r\n        // si l'id du groupe n'existe pas encore dans le tableau, on le push et on crée un ligne pour le groupe\r\n        groups.forEach(grelement => {\r\n            if (element.idgroup === grelement.idgroup) {\r\n                contains = true;\r\n                idPosition = index;\r\n            }\r\n        });\r\n        if (!contains) {\r\n            groups.push({idgroup: element.idgroup, issharing: element.sharesposition, nomgroup: element.nomgroup, membres: []})\r\n        }\r\n    });\r\n    //une fois le tableau des groupes créé, on push les membres dans groups[idGroupConcerné].membres\r\n    queryResult.forEach((element) => {\r\n        let idGroupeConcerne;\r\n        //on get la position dans groups du groupe concerné pour l'user (element)\r\n        groups.forEach((grelement, grindex) => {\r\n            if (grelement.idgroup === element.idgroup) {\r\n                idGroupeConcerne = grindex;\r\n                groups[idGroupeConcerne].membres.push({\r\n                    iduser: element.iduser,\r\n                    prenom: element.prenom,\r\n                    nomuser: element.nomuser\r\n                });\r\n            }\r\n        })\r\n    });\r\n    return groups;\r\n\r\n}\r\n\r\n// https://stackoverflow.com/questions/16767301/calculate-difference-between-2-timestamps-using-javascript\r\n// Pour check les daaaates hehehe\r\n\r\n\r\n//SSSSIIII l'utilisateur partage sa position avec le groupe , ne pas l'envoyer\r\n// +++ ne pas envoyer les user si leur position est nulle\r\n\r\n\r\n// les infos d'un groupe en particulier (les pinpoints et les positions des utilisateurs du groupe\r\nrouter.get('/positions/:iduser/:idgroup', function(req,res){\r\n    //vérifier si l'utilisateur est bien dans le groupe avant de faire le traitement\r\n   let iduser = parseInt(req.params.iduser, 10);\r\n   let idgroup = req.params.idgroup;\r\n//pour le groupe : renvoyer son nom, les pinpoints qui lui sont associés, les dessins,\r\n// les positions des gens SSI ils décident de la partager avec ce groupe\r\n    let requete = getGroupPinpoints(idgroup);\r\n    db.any(requete)\r\n        .then((result) =>{\r\n            let JSONToReturn = {idgroup: idgroup, issharing: false,  pinpoints:[], userpositions:[]};\r\n            result.forEach(element => {\r\n\r\n                // CHECK SI LA DATE est supérieure de 1 jour de plus de la date de RDV. sinon ne\r\n                let currentTime = new Date();\r\n                let diff = currentTime - element.daterdv;// donne la diff en millisecondes\r\n                let dontPush = false;\r\n                if(diff > 8.64e+7){// le nombre de millisecs en 1 jour hehe\r\n                    dontPush = true;\r\n                }\r\n                console.log(diff);\r\n                //pas renvoyer\r\n                let pinpoint = {\r\n                    idpinpoint: element.idpinpoint,\r\n                    idcreator: element.idcreator,\r\n                    nomcreator: element.nom,\r\n                    prenomcreator: element.prenom,\r\n                    pinlt: element.pinlt,\r\n                    pinlg:element.pinlg,\r\n                    description:element.description,\r\n                    daterdv:element.daterdv\r\n                };\r\n                //si la date est ok on le push dans l'array\r\n                if(!dontPush){\r\n                    JSONToReturn.pinpoints.push(pinpoint);\r\n\r\n                }\r\n            });\r\n            db.any(getUsersPositions(idgroup))\r\n                .then((userpositions) => {\r\n\r\n                    let currentDate = new Date();\r\n                    let userCorrectRequest = false;\r\n                    userpositions.forEach(element =>{\r\n\r\n                        if(parseInt(element.iduser,10) === iduser) {\r\n                            userCorrectRequest = true; // on vérifie ici si le gars qui demande est bien dans le groupe\r\n                            JSONToReturn.issharing = element.sharesposition;\r\n\r\n\r\n                        }\r\n                        let isCurrent = false;\r\n                        if(element.dateposition !== null){\r\n                            isCurrent = compareTimes(currentDate, element.dateposition);\r\n                        }\r\n\r\n\r\n                        let userposition = {\r\n                           iduser: element.iduser,\r\n                            prenom: element.prenom,\r\n                            nom:element.nom,\r\n                           userlt:element.userglt,\r\n                           userlg:element.userglg,\r\n                           current:isCurrent,\r\n                           dateposition:element.dateposition\r\n                       };\r\n                        if(element.dateposition !== null){\r\n                            if(!(parseInt(element.iduser,10) === iduser && element.sharesposition)){\r\n                                JSONToReturn.userpositions.push(userposition);\r\n                            }\r\n                        }\r\n                    });\r\n\r\n                    if(userCorrectRequest){\r\n                        res.send({\r\n                            status: 'success',\r\n                            message: JSONToReturn\r\n                        });\r\n                    }\r\n                    else{\r\n                        res.status(400);\r\n                        res.send({\r\n                            status:'fail',\r\n                            message: 'You requested the informations of a group in which you DON\\'T belong, bitch'\r\n                        })\r\n                    }\r\n\r\n                })\r\n                .catch(err => {\r\n                    res.status(400);\r\n                    res.send({\r\n                        status: 'fail',\r\n                        message: err.toString()\r\n                    })\r\n                })\r\n        })\r\n        .catch(e => {\r\n            res.status(400);\r\n            res.send({\r\n                status: 'fail',\r\n                message: e.toString()\r\n            })\r\n        });\r\n\r\n\r\n});\r\n\r\nlet getGroupPinpoints = (idgroup) =>\r\n    squel.select()\r\n        .from('public.\"GROUP\"', 'gr')\r\n        .field('gr.nom', 'nomgroup')\r\n        .field('gr.idgroup')\r\n        .field('pin.idcreator')\r\n        .field('pin.idpinpoint')\r\n        .field('pin.pinlt')\r\n        .field('pin.pinlg')\r\n        .field('pin.description')\r\n        .field('pin.daterdv')\r\n        .field('usr.prenom')\r\n        .field('usr.nom')\r\n        .left_join('public.\"PINPOINT\"', 'pin', 'pin.idgroup = gr.idgroup')\r\n        .left_join('public.\"USER\"', 'usr', 'usr.iduser = pin.idcreator')\r\n        .where('gr.idgroup = ?', idgroup)\r\n        .toString();\r\n\r\nlet getUsersPositions = (idgroup) =>\r\n    squel.select()\r\n        .from('public.\"GROUP\"', 'gr')\r\n        .field('ugr.iduser')\r\n        .field('ugr.sharesposition')\r\n        .field('ugr.userglt')\r\n        .field('ugr.userglg')\r\n        .field(\"ugr.dateposition\")\r\n        .field('usr.nom')\r\n        .field('usr.prenom')\r\n        .left_join('public.\"USER_GROUP\"', 'ugr', 'ugr.idgroup = gr.idgroup')\r\n        .left_join('public.\"USER\"', 'usr', 'usr.iduser = ugr.iduser')\r\n        .where('gr.idgroup = ?', idgroup)\r\n        .toString();\r\n\r\n\r\n//Si la dernière position stockée est > 15min, l'utilisateur est considéré comme inactif\r\nfunction compareTimes(currentTime, lastLocationTime){\r\n    let toReturn = false;\r\n    if(currentTime.getMonth() === lastLocationTime.getMonth()){\r\n        if(currentTime.getDay() === lastLocationTime.getDay()){\r\n            if(currentTime.getHours() === lastLocationTime.getHours()){\r\n                if(currentTime.getMinutes() - lastLocationTime.getMinutes() < 15){\r\n                    toReturn = true;\r\n                }\r\n            }\r\n        }\r\n    }\r\n    return toReturn;\r\n}\r\n\r\nrouter.get('/drawings/:iduser/:idgroup', function(req,res){\r\n    let iduser = req.params.iduser;\r\n    let idgroup = req.params.idgroup;\r\n    let query = getDrawings(idgroup);\r\n    let JSONToReturn = {\r\n        idgroup: idgroup,\r\n        drawings:[]\r\n    };\r\n\r\n    db.any(query)\r\n        .then((result) =>{\r\n            result.forEach(element =>{\r\n                let objectToPush = {\r\n                    iddrawing : element.iddrawing,\r\n                    idcreator: element.idcreator,\r\n                    nomcreator: element.nom,\r\n                    prenomcreator: element.prenom,\r\n                    description: element.description,\r\n                    lt: element.lt,\r\n                    lg: element.lg,\r\n                    img: element.img\r\n                };\r\n                if(element.actif){\r\n                    JSONToReturn.drawings.push(objectToPush);\r\n                }\r\n            });\r\n            console.log(JSONToReturn);\r\n            res.send({\r\n                status: 'success',\r\n                message: JSONToReturn\r\n            });\r\n        })\r\n        .catch( e => {\r\n            res.status(400);\r\n            res.send({\r\n                status: 'fail',\r\n                message: e.toString()\r\n            });\r\n        });\r\n\r\n});\r\n\r\n\r\nlet getDrawings = (idgroup) =>\r\n    squel.select()\r\n        .from('public.\"DRAWING\"', 'draw')\r\n        .field('draw.iddrawing')\r\n        .field('draw.idcreator')\r\n        .field('draw.actif')\r\n        .field('draw.img')\r\n        .field('draw.drawinglg', 'lg')\r\n        .field('draw.drawinglt', 'lt')\r\n        .field('description')\r\n        .field('usr.nom')\r\n        .field('usr.prenom')\r\n        .left_join('public.\"USER\"', 'usr', 'usr.iduser = draw.idcreator')\r\n        .where('draw.idgroup = ?', idgroup)\r\n        .toString();\r\n\r\n//ca passe en post\r\nrouter.post('/creategroup', function (req, res) {\r\n\r\n    let toCreate = {\r\n        iduser: req.body.iduser,\r\n        groupname: req.body.groupname\r\n    };\r\n\r\n    let currentTime = new Date();\r\n    let query = squel.insert()\r\n        .into('public.\"GROUP\"')\r\n        .set('nom', toCreate.groupname)\r\n        .set('creationdate', currentTime.toISOString())\r\n        .returning('idgroup')\r\n        .toString();\r\n\r\n    db.one(query)\r\n        .then((row)=>{\r\n            let inUserGroup = squel.insert()\r\n                .into('public.\"USER_GROUP\"', 'ugr')\r\n                .set('idgroup', row.idgroup)\r\n                .set('iduser', toCreate.iduser)\r\n                .set('iscreator', true)\r\n                .toString();\r\n            db.none(inUserGroup)\r\n                .then(()=>{\r\n                    let response = {\r\n                        idgroup : row.idgroup\r\n                    };\r\n                    sender.sendResponse(sender.SUCCESS_STATUS, response, res)\r\n                })\r\n                .catch(err=>{\r\n                    sender.sendResponse(sender.BAD_REQUEST, 'Failed to insert user in USER_GROUP', res);\r\n                    console.log(err);\r\n                })\r\n\r\n        })\r\n        .catch(e => {\r\n            sender.sendResponse(sender.BAD_REQUEST, 'Failed to create group', res);\r\n            console.log(e);\r\n        })\r\n});\r\n\r\nrouter.post('/changegroupname', function(req,res){\r\n    let toChange = {\r\n        idgroup: req.body.idgroup,\r\n        groupname:req.body.newgroupname\r\n    };\r\n\r\n    let query = squel.update()\r\n        .table('public.\"GROUP\"')\r\n        .set('nom', toChange.groupname)\r\n        .where('idgroup = ?', toChange.idgroup)\r\n        .toString();\r\n    db.none(query)\r\n        .then(()=>{\r\n        let response = {status: 'success',message:'groupname updated successfully'};\r\n            sender.sendResponse(sender.SUCCESS_STATUS, response, res)\r\n        })\r\n        .catch(e=>{\r\n            sender.sendResponse(sender.BAD_REQUEST, {status:'fail',message:'Failed to update groupname'}, res);\r\n            console.log(e);\r\n        })\r\n\r\n});\r\n\r\nmodule.exports = router;\r\n"]}