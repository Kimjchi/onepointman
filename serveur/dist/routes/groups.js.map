{"version":3,"sources":["../../routes/groups.js"],"names":["express","require","router","Router","db","squelb","squel","useFlavour","get","req","res","iduser","params","groups","getUsersInGroups","any","then","tableau","toReturn","buildGroupsObject","send","status","message","catch","e","toString","getGroups","select","from","field","where","left_join","queryResult","forEach","element","index","contains","idPosition","idgroup","grelement","push","nomgroup","membres","idGroupeConcerne","grindex","prenom","nomuser","parseInt","requete","getGroupPinpoints","result","JSONToReturn","pinpoints","userpositions","pinpoint","idpinpoint","idcreator","nomcreator","nom","prenomcreator","pinlt","pinlg","description","daterdv","getUsersPositions","console","log","currentDate","Date","userCorrectRequest","isCurrent","dateposition","compareTimes","userposition","userlt","userglt","userlg","userglg","current","sharesposition","err","currentTime","lastLocationTime","getMonth","getDay","getHours","getMinutes","module","exports"],"mappings":"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","file":"groups.js","sourcesContent":["const express = require('express');\r\nconst router = express.Router();\r\nconst db = require('../connection');\r\nconst squelb = require('squel');\r\nconst squel = squelb.useFlavour('postgres');\r\n\r\n//donne les groupes auxquels appartient un utilisateur + les membres du groupe\r\nrouter.get('/:iduser/', function (req, res) {\r\n    let iduser = req.params.iduser;\r\n    let groups = getUsersInGroups(iduser);\r\n    db.any(groups)\r\n        .then((tableau) => {\r\n            let toReturn = buildGroupsObject(tableau);\r\n            res.send({\r\n                status: 'success',\r\n                message: toReturn\r\n            });\r\n            //sender.sendResponse(sender.SUCCESS_STATUS, toReturn, res);\r\n\r\n        })\r\n        .catch(e => {\r\n            res.status(400);\r\n            res.send({\r\n                status: 'fail',\r\n                message: e.toString()\r\n            });\r\n            //sender.sendResponse(sender.NOT_FOUND_STATUS, toReturn, res);\r\n        });\r\n\r\n});\r\n\r\nlet getGroups = (iduser) =>\r\n    squel.select()\r\n        .from('public.\"USER_GROUP\"', 'ugr')\r\n        .field('ugr.idgroup')\r\n        .field('gr.nom')\r\n        .where('ugr.iduser = ?', iduser)\r\n        .left_join('public.\"GROUP\"', 'gr', 'ugr.idgroup = gr.idgroup')\r\n;\r\n\r\nlet getUsersInGroups = (iduser) =>\r\n    squel.select()\r\n        .from(getGroups(iduser), 'listgroups')\r\n        .left_join('public.\"USER_GROUP\"', 'ugr', 'ugr.idgroup = listgroups.idgroup')\r\n        .left_join('public.\"USER\"', 'usr', 'usr.iduser = ugr.iduser')\r\n        .field('usr.prenom')\r\n        .field('usr.nom', 'nomuser')\r\n        .field('usr.iduser')\r\n        .field('listgroups.nom', 'nomgroup')\r\n        .field('ugr.idgroup')\r\n        .toString();\r\n\r\nfunction buildGroupsObject(queryResult) {\r\n    var groups = [];\r\n    queryResult.forEach((element, index) => {\r\n        // le resultat de la requete donne un tableau de {prenom, nomuser, iduser, nomgroup, idgroup}\r\n        let contains = false;\r\n        let idPosition;\r\n        // si l'id du groupe n'existe pas encore dans le tableau, on le push et on crée un ligne pour le groupe\r\n        groups.forEach(grelement => {\r\n            if (element.idgroup === grelement.idgroup) {\r\n                contains = true;\r\n                idPosition = index;\r\n            }\r\n        });\r\n        if (!contains) {\r\n            groups.push({idgroup: element.idgroup, nomgroup: element.nomgroup, membres: []})\r\n        }\r\n    });\r\n    //une fois le tableau des groupes créé, on push les membres dans groups[idGroupConcerné].membres\r\n    queryResult.forEach((element) => {\r\n        let idGroupeConcerne;\r\n        //on get la position dans groups du groupe concerné pour l'user (element)\r\n        groups.forEach((grelement, grindex) => {\r\n            if (grelement.idgroup === element.idgroup) {\r\n                idGroupeConcerne = grindex;\r\n                groups[idGroupeConcerne].membres.push({\r\n                    iduser: element.iduser,\r\n                    prenom: element.prenom,\r\n                    nomuser: element.nomuser\r\n                });\r\n            }\r\n        })\r\n    });\r\n    return groups;\r\n\r\n}\r\n\r\n// https://stackoverflow.com/questions/16767301/calculate-difference-between-2-timestamps-using-javascript\r\n// Pour check les daaaates hehehe\r\n\r\n\r\n//SSSSIIII l'utilisateur partage sa position avec le groupe , ne pas l'envoyer\r\n// +++ ne pas envoyer les user si leur position est nulle\r\n\r\n\r\n// les infos d'un groupe en particulier (les pinpoints et les positions des utilisateurs du groupe\r\nrouter.get('/positions/:iduser/:idgroup', function(req,res){\r\n    //vérifier si l'utilisateur est bien dans le groupe avant de faire le traitement\r\n   let iduser = parseInt(req.params.iduser, 10);\r\n   let idgroup = req.params.idgroup;\r\n//pour le groupe : renvoyer son nom, les pinpoints qui lui sont associés, les dessins,\r\n// les positions des gens SSI ils décident de la partager avec ce groupe\r\n    let requete = getGroupPinpoints(idgroup);\r\n    db.any(requete)\r\n        .then((result) =>{\r\n            let JSONToReturn = {idgroup: idgroup, pinpoints:[], userpositions:[]};\r\n            result.forEach(element => {\r\n\r\n                // CHECK SI LA DATE est supérieure de 1 jour de plus de la date de RDV. sinon ne\r\n                //pas renvoyer\r\n                let pinpoint = {\r\n                    idpinpoint: element.idpinpoint,\r\n                    idcreator: element.idcreator,\r\n                    nomcreator: element.nom,\r\n                    prenomcreator: element.prenom,\r\n                    pinlt: element.pinlt,\r\n                    pinlg:element.pinlg,\r\n                    description:element.description,\r\n                    daterdv:element.daterdv\r\n                };\r\n                //si la date est ok on le push dans l'array\r\n                JSONToReturn.pinpoints.push(pinpoint);\r\n            });\r\n            db.any(getUsersPositions(idgroup))\r\n                .then((userpositions) => {\r\n                console.log(getUsersPositions(idgroup));\r\n                    let currentDate = new Date();\r\n                    let userCorrectRequest = false;\r\n                    userpositions.forEach(element =>{\r\n                        if(parseInt(element.iduser,10) === iduser) {\r\n                            userCorrectRequest = true; // on vérifie ici si le gars qui demande est bien dans le groupe\r\n                        }\r\n                        let isCurrent = false;\r\n                        if(element.dateposition !== null){\r\n                            isCurrent = compareTimes(currentDate, element.dateposition);\r\n                        }\r\n\r\n\r\n                        let userposition = {\r\n                           iduser: element.iduser,\r\n                            prenom: element.prenom,\r\n                            nom:element.nom,\r\n                           userlt:element.userglt,\r\n                           userlg:element.userglg,\r\n                           current:isCurrent,\r\n                           dateposition:element.dateposition\r\n                       };\r\n                        if(element.dateposition !== null){\r\n                            if(!(parseInt(element.iduser,10) === iduser && element.sharesposition)){\r\n                                JSONToReturn.userpositions.push(userposition);\r\n                            }\r\n                        }\r\n                    });\r\n\r\n                    if(userCorrectRequest){\r\n                        res.send({\r\n                            status: 'success',\r\n                            message: JSONToReturn\r\n                        });\r\n                    }\r\n                    else{\r\n                        res.status(400);\r\n                        res.send({\r\n                            status:'fail',\r\n                            message: 'You requested the informations of a group in which you DON\\'T belong, bitch'\r\n                        })\r\n                    }\r\n\r\n                })\r\n                .catch(err => {\r\n                    res.status(400);\r\n                    res.send({\r\n                        status: 'fail',\r\n                        message: err.toString()\r\n                    })\r\n                })\r\n        })\r\n        .catch(e => {\r\n            res.status(400);\r\n            res.send({\r\n                status: 'fail',\r\n                message: e.toString()\r\n            })\r\n        });\r\n    console.log(requete);\r\n\r\n\r\n});\r\n\r\nlet getGroupPinpoints = (idgroup) =>\r\n    squel.select()\r\n        .from('public.\"GROUP\"', 'gr')\r\n        .field('gr.nom', 'nomgroup')\r\n        .field('gr.idgroup')\r\n        .field('pin.idcreator')\r\n        .field('pin.idpinpoint')\r\n        .field('pin.pinlt')\r\n        .field('pin.pinlg')\r\n        .field('pin.description')\r\n        .field('pin.daterdv')\r\n        .field('usr.prenom')\r\n        .field('usr.nom')\r\n        .left_join('public.\"PINPOINT\"', 'pin', 'pin.idgroup = gr.idgroup')\r\n        .left_join('public.\"USER\"', 'usr', 'usr.iduser = pin.idcreator')\r\n        .where('gr.idgroup = ?', idgroup)\r\n        .toString();\r\n\r\nlet getUsersPositions = (idgroup) =>\r\n    squel.select()\r\n        .from('public.\"GROUP\"', 'gr')\r\n        .field('ugr.iduser')\r\n        .field('ugr.sharesposition')\r\n        .field('ugr.userglt')\r\n        .field('ugr.userglg')\r\n        .field(\"ugr.dateposition\")\r\n        .field('usr.nom')\r\n        .field('usr.prenom')\r\n        .left_join('public.\"USER_GROUP\"', 'ugr', 'ugr.idgroup = gr.idgroup')\r\n        .left_join('public.\"USER\"', 'usr', 'usr.iduser = ugr.iduser')\r\n        .where('gr.idgroup = ?', idgroup)\r\n        .toString();\r\n\r\n\r\n//Si la dernière position stockée est > 15min, l'utilisateur est considéré comme inactif\r\nfunction compareTimes(currentTime, lastLocationTime){\r\n    let toReturn = false;\r\n    if(currentTime.getMonth() === lastLocationTime.getMonth()){\r\n        if(currentTime.getDay() === lastLocationTime.getDay()){\r\n            if(currentTime.getHours() === lastLocationTime.getHours()){\r\n                if(currentTime.getMinutes() - lastLocationTime.getMinutes() < 15){\r\n                    toReturn = true;\r\n                }\r\n            }\r\n        }\r\n    }\r\n    return toReturn;\r\n\r\n\r\n}\r\n\r\nmodule.exports = router;\r\n"]}