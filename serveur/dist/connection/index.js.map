{"version":3,"sources":["../../connection/index.js"],"names":["squel","require","promise","options","promiseLib","pgp","express","router","Router","pg","db","username","password","host","database","database_port","conString","query","client","Client","connect","DB","select","field","toString","then","console","log","res","now","catch","error","e","message","stack","err","module","exports"],"mappings":";;AAAA,IAAMA,QAAQC,QAAQ,OAAR,CAAd;AACA,IAAMC,UAAUD,QAAQ,UAAR,CAAhB;AACA,IAAME,UAAU,EAACC,YAAYF,OAAb,EAAhB;AACA,IAAMG,MAAMJ,QAAQ,YAAR,EAAsBE,OAAtB,CAAZ;;AAEA,IAAIG,UAAUL,QAAQ,SAAR,CAAd,C,CAAkC;AAClC,IAAIM,SAASD,QAAQE,MAAR,EAAb,C,CAA+B;;AAE/B;AACA,IAAIC,KAAKR,QAAQ,IAAR,CAAT,C,CAAwB;;AAExB;AACA;;;;;;AAMA,IAAIS,KAAK,EAAT;AACA,IAAIC,WAAW,gBAAf,C,CAAgC;AAChC,IAAIC,WAAW,kEAAf,C,CAAkF;AAClF,IAAIC,OAAO,4CAAX;AACA,IAAIC,WAAW,gBAAf,C,CAAgC;AAChC,IAAIC,gBAAgB,MAApB;AACA,IAAIC,YAAY,gBAAgBL,QAAhB,GAA2B,GAA3B,GAAiCC,QAAjC,GAA4C,GAA5C,GAAkDC,IAAlD,GAAyD,GAAzD,GAA+DE,aAA/D,GAA+E,GAA/E,GAAqFD,QAArF,GAAgG,WAAhH,C,CAA6H;;AAE7H;AACA,IAAIG,QAAQ,cAAZ;;AAEA,IAAIC,SAAS,IAAIT,GAAGU,MAAP,CAAcH,SAAd,CAAb;AACAE,OAAOE,OAAP;;AAEA,IAAMC,KAAKhB,IAAIW,SAAJ,CAAX;;AAEAK,GAAGJ,KAAH,CAASjB,MAAMsB,MAAN,GACJC,KADI,CACE,OADF,EAEJC,QAFI,EAAT,EAGKC,IAHL,CAGU,eAAO;AACTC,YAAQC,GAAR,CAAY,YAAZ,EAA0BC,IAAI,CAAJ,EAAOC,GAAjC;AACH,CALL,EAMKC,KANL,CAMW,aAAK;AACRJ,YAAQK,KAAR,CAAc,aAAd,EAA6BC,EAAEC,OAA/B,EAAwCD,EAAEE,KAA1C;AACH,CARL,EASKJ,KATL,CASW,eAAO;AACVJ,YAAQK,KAAR,CAAc,mCAAd,EAAmDI,GAAnD;AACH,CAXL;;AAaA;;;;AAKAC,OAAOC,OAAP,GAAiBhB,EAAjB","file":"index.js","sourcesContent":["const squel = require(\"squel\");\r\nconst promise = require('bluebird');\r\nconst options = {promiseLib: promise};\r\nconst pgp = require('pg-promise')(options);\r\n\r\nvar express = require('express'); // require Express\r\nvar router = express.Router(); // setup usage of the Express router engine\r\n\r\n/* PostgreSQL and PostGIS module and connection setup */\r\nvar pg = require(\"pg\"); // require Postgres module\r\n\r\n// Setup connection\r\n/*var username = \"postgres\" ;// sandbox username\r\nvar password = \"root\" ;// read only privileges on our table\r\nvar host = \"localhost\";\r\nvar database = \"postgres\" ;// database name\r\nvar database_port = '5433';\r\nvar conString = \"postgres://\"+username+\":\"+password+\"@\"+host+':' + database_port +\"/\"+database; // Your Database Connection*/\r\nvar db = {};\r\nvar username = \"ibczdvtaadgadk\";// sandbox username\r\nvar password = \"3cc134f31e9b48c561177588ca3ab639d9ae83ef1a06efd51fab3bdf3d790c9b\";// read only privileges on our table\r\nvar host = \"ec2-54-163-235-175.compute-1.amazonaws.com\";\r\nvar database = \"d71i59h5089d3k\";// database name\r\nvar database_port = '5432';\r\nvar conString = \"postgres://\" + username + \":\" + password + \"@\" + host + ':' + database_port + \"/\" + database + \"?ssl=true\"; // Your Database Connection\r\n\r\n// Set up your database query to display GeoJSON\r\nvar query = 'SELECT now()';\r\n\r\nvar client = new pg.Client(conString);\r\nclient.connect();\r\n\r\nconst DB = pgp(conString);\r\n\r\nDB.query(squel.select()\r\n    .field('NOW()')\r\n    .toString())\r\n    .then(res => {\r\n        console.log('time is : ', res[0].now);\r\n    })\r\n    .catch(e => {\r\n        console.error('query error', e.message, e.stack);\r\n    })\r\n    .catch(err => {\r\n        console.error('Unable to connect to the database', err);\r\n    });\r\n\r\n/*client.query(query, function (row, result) {\r\n    console.log(result.rows[0].now);\r\n});*/\r\n\r\n\r\nmodule.exports = DB;"]}