{"version":3,"sources":["../../connection/index.js"],"names":["squel","require","promise","options","promiseLib","pgp","express","router","Router","pg","username","password","host","database","database_port","conString","query","client","Client","connect","DB","select","field","toString","then","console","log","res","now","catch","error","e","message","stack","err","module","exports"],"mappings":";;AAAA,IAAMA,QAAQC,QAAQ,OAAR,CAAd;AACA,IAAMC,UAAUD,QAAQ,UAAR,CAAhB;AACA,IAAME,UAAU,EAACC,YAAYF,OAAb,EAAhB;AACA,IAAMG,MAAMJ,QAAQ,YAAR,EAAsBE,OAAtB,CAAZ;;AAEA,IAAIG,UAAUL,QAAQ,SAAR,CAAd,C,CAAkC;AAClC,IAAIM,SAASD,QAAQE,MAAR,EAAb,C,CAA+B;;AAE/B;AACA,IAAIC,KAAKR,QAAQ,IAAR,CAAT,C,CAAwB;;;AAGxB;AACA,IAAIS,WAAW,UAAf,C,CAA2B;AAC3B,IAAIC,WAAW,MAAf,C,CAAuB;AACvB,IAAIC,OAAO,WAAX;AACA,IAAIC,WAAW,UAAf,C,CAA2B;AAC3B,IAAIC,gBAAgB,MAApB;AACA,IAAIC,YAAY,gBAAcL,QAAd,GAAuB,GAAvB,GAA2BC,QAA3B,GAAoC,GAApC,GAAwCC,IAAxC,GAA6C,GAA7C,GAAmDE,aAAnD,GAAkE,GAAlE,GAAsED,QAAtF,C,CAAgG;;AAEhG;AACA,IAAIG,QAAQ,cAAZ;;AAEA,IAAIC,SAAS,IAAIR,GAAGS,MAAP,CAAcH,SAAd,CAAb;AACAE,OAAOE,OAAP;;AAEA,IAAMC,KAAKf,IAAIU,SAAJ,CAAX;;AAEAK,GAAGJ,KAAH,CAAShB,MAAMqB,MAAN,GACJC,KADI,CACE,OADF,EAEJC,QAFI,EAAT,EAGKC,IAHL,CAGU,eAAM;AAACC,YAAQC,GAAR,CAAY,SAAZ,EAAuBC,IAAI,CAAJ,EAAOC,GAA9B;AACZ,CAJL,EAKKC,KALL,CAKW,aAAG;AAACJ,YAAQK,KAAR,CAAc,aAAd,EAA6BC,EAAEC,OAA/B,EAAwCD,EAAEE,KAA1C;AACV,CANL,EAOKJ,KAPL,CAOW,eAAK;AAACJ,YAAQK,KAAR,CAAc,mCAAd,EAAmDI,GAAnD;AACZ,CARL;;AAUA;;;;AAKAC,OAAOC,OAAP,GAAiBhB,EAAjB","file":"index.js","sourcesContent":["const squel = require(\"squel\");\r\nconst promise = require('bluebird');\r\nconst options = {promiseLib: promise};\r\nconst pgp = require('pg-promise')(options);\r\n\r\nvar express = require('express'); // require Express\r\nvar router = express.Router(); // setup usage of the Express router engine\r\n\r\n/* PostgreSQL and PostGIS module and connection setup */\r\nvar pg = require(\"pg\"); // require Postgres module\r\n\r\n\r\n// Setup connection\r\nvar username = \"postgres\" ;// sandbox username\r\nvar password = \"root\" ;// read only privileges on our table\r\nvar host = \"localhost\";\r\nvar database = \"postgres\" ;// database name\r\nvar database_port = '5433';\r\nvar conString = \"postgres://\"+username+\":\"+password+\"@\"+host+':' + database_port +\"/\"+database; // Your Database Connection\r\n\r\n// Set up your database query to display GeoJSON\r\nvar query = 'SELECT now()';\r\n\r\nvar client = new pg.Client(conString);\r\nclient.connect();\r\n\r\nconst DB = pgp(conString);\r\n\r\nDB.query(squel.select()\r\n    .field('NOW()')\r\n    .toString())\r\n    .then(res=> {console.log('time is', res[0].now);\r\n    })\r\n    .catch(e=>{console.error('query error', e.message, e.stack );\r\n    })\r\n    .catch(err=>{console.error('Unable to connect to the database', err);\r\n    });\r\n\r\n/*client.query(query, function (row, result) {\r\n    console.log(result.rows[0].now);\r\n});*/\r\n\r\n\r\nmodule.exports = DB;"]}