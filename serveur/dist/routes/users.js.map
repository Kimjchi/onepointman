{"version":3,"sources":["../../routes/users.js"],"names":["express","require","router","Router","axios","db","squelb","squel","useFlavour","sender","facebookdata","get","req","res","next","send","userAccessToken","post","toUpdate","iduser","body","userlg","userlt","getGroups","select","from","field","where","parseInt","toString","any","then","groups","currentTime","Date","updateUserTable","update","table","set","toISOString","none","console","log","forEach","element","sharesposition","query","idgroup","catch","status","message","e","positionSharing","sendResponse","SUCCESS_STATUS","BAD_REQUEST","toCreate","insert","into","delete","query2","result","length","deleteLastUser","deleteGroup","err","error","user_id","params","userFriendList","friendlist","_getUserFriendList","response","data","userFriendListRequest","redirectURI","userID","module","exports"],"mappings":"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","file":"users.js","sourcesContent":["var express = require('express');\r\nvar router = express.Router();\r\nconst axios = require('axios');\r\n\r\nconst db = require('../connection');\r\nconst squelb = require('squel');\r\nconst squel = squelb.useFlavour('postgres');\r\n\r\nconst sender = require('../sender');\r\nconst facebookdata = require(\"../facebookdata\");\r\n\r\n/* GET users listing. */\r\nrouter.get('/', function (req, res, next) {\r\n    res.send('respond with a resource user id :' + facebookdata.userAccessToken);\r\n});\r\n\r\nrouter.post(('/updateposition'), function (req, res) {\r\n\r\n    let toUpdate = {\r\n        iduser: req.body.iduser,\r\n        userlg: req.body.userlg,\r\n        userlt: req.body.userlt,\r\n    };\r\n\r\n    let getGroups = squel.select()\r\n        .from('public.\"USER_GROUP\"', 'ugr')\r\n        .field('ugr.idgroup')\r\n        .field('ugr.sharesposition')\r\n        .where('ugr.iduser = ?', parseInt(toUpdate.iduser, 10))\r\n        .toString();\r\n    db.any(getGroups)\r\n        .then((groups) =>{\r\n            let currentTime = new Date();\r\n            let updateUserTable = squel.update()\r\n                .table('public.\"USER\"')\r\n                .set('lg', toUpdate.userlg)\r\n                .set('lt',toUpdate.userlt)\r\n                .set('dateposition', currentTime.toISOString())\r\n                .where('iduser = ?', toUpdate.iduser)\r\n                .toString();\r\n            db.none(updateUserTable)\r\n                .then(() => {\r\n                    console.log('Updated position of user in USER ');\r\n                    console.log(groups);\r\n                    groups.forEach(element => {\r\n                        //pour chaque groupe, s'il dÃ©cide de partager sa position avec, on update sa position\r\n                        if (element.sharesposition === true) {\r\n                            let query = squel.update()\r\n                                .table('public.\"USER_GROUP\"')\r\n                                .set('userglt', toUpdate.userlt)\r\n                                .set('userglg', toUpdate.userlg)\r\n                                .set('dateposition', currentTime.toISOString())\r\n                                .where('iduser = ?', toUpdate.iduser)\r\n                                .toString();\r\n                            db.none(query)\r\n                                .then(() => {\r\n                                    console.log('Updated position of user in group ' + element.idgroup);\r\n                                })\r\n                                .catch(e => {\r\n                                    res.status(400);\r\n                                    res.send({\r\n                                        status: 'fail',\r\n                                        message: 'failing to update userposition in a group'\r\n                                    });\r\n                                    console.log('failed at updating position in group');\r\n                                })\r\n                        }\r\n\r\n                })\r\n            });\r\n\r\n            res.send({\r\n                status: 'success',\r\n                message: 'Position updated successfully'\r\n            })\r\n        })\r\n        .catch(e => {\r\n            res.status(400);\r\n            res.send({\r\n                status: 'fail',\r\n                message: e.toString()\r\n            })\r\n        });\r\n});\r\n\r\nrouter.post(('/updatepositionsharing/'), function(req, res){\r\n\r\n    let toUpdate = {\r\n        iduser : req.body.iduser,\r\n        idgroup : req.body.idgroup,\r\n        positionSharing : req.body.positionSharing,\r\n    };\r\n\r\n    let query = squel.update()\r\n        .table('public.\"USER_GROUP\"')\r\n        .set('sharesposition', toUpdate.positionSharing)\r\n        .where('iduser = ?', toUpdate.iduser)\r\n        .where('idgroup = ?', toUpdate.idgroup)\r\n        .toString();\r\n\r\n    db.query(query)\r\n        .then(()=>{\r\n            sender.sendResponse(sender.SUCCESS_STATUS, {status:'success',message:'Position sharing updated successfully'}, res)\r\n        })\r\n        .catch(e => {\r\n            sender.sendResponse(sender.BAD_REQUEST, {status:'fail', message:'Error while updating position sharing'}, res);\r\n            console.log(e);\r\n        })\r\n});\r\n\r\nrouter.post('/createuser/', function (req, res) {\r\n\r\n    let toCreate = {\r\n        iduser: req.body.iduser,\r\n        idgroup: req.body.idgroup,\r\n    };\r\n    let query = squel.insert()\r\n        .into('public.\"USER_GROUP\"')\r\n        .set('iduser', parseInt(toCreate.iduser))\r\n        .set('idgroup', parseInt(toCreate.idgroup))\r\n        .toString();\r\n\r\n    db.none(query)\r\n        .then(()=>{\r\n            sender.sendResponse(sender.SUCCESS_STATUS, {status:'success',message:'User ' + toCreate.iduser + ' added to group ' + toCreate.idgroup + ' successfully'}, res)\r\n        })\r\n        .catch(e => {\r\n            sender.sendResponse(sender.BAD_REQUEST, {status:'fail',message:'Error while adding user ' + toCreate.iduser + ' to group'}, res);\r\n            console.log(e);\r\n        })\r\n});\r\n\r\nrouter.post('/deleteuser/', function(req, res){\r\n    console.log(req.body);\r\n    let toUpdate = {\r\n        iduser : req.body.iduser,\r\n        idgroup : req.body.idgroup,\r\n    };\r\n// check si ya 1 personne dans le groupe\r\n    let query = squel.delete()\r\n        .from('public.\"USER_GROUP\"')\r\n        .where('iduser = ?', parseInt(toUpdate.iduser))\r\n        .where('idgroup = ?', parseInt(toUpdate.idgroup))\r\n        .toString();\r\n    db.query(query)\r\n        .then(()=>{\r\n        let query2 = squel.select()\r\n            .from('public.\"USER_GROUP\"')\r\n            .where('idgroup = ? ', parseInt(toUpdate.idgroup))\r\n            .toString();\r\n        db.any(query2)\r\n            .then((result)=>{\r\n                if(result.length === 1){\r\n                    //supprimer la derniere personne du groupe\r\n                    let deleteLastUser = squel.delete()\r\n                        .from('public.\"USER_GROUP\"')\r\n                        .where('idgroup = ?', parseInt(toUpdate.idgroup))\r\n                        .toString();\r\n                    db.query(deleteLastUser)\r\n                        .then(()=>{\r\n                            console.log('deleted last user from group successfully')\r\n                            let deleteGroup=squel.delete()\r\n                                .from('public.\"GROUP\"')\r\n                                .where('idgroup = ?', toUpdate.idgroup)\r\n                                .toString();\r\n                            db.query(deleteGroup)\r\n                                .then(()=>{\r\n                                    console.log(\"group deleted bc no more users\");\r\n                                })\r\n                                .catch(err=>{\r\n                                    console.log(\"failed at deleting empty group\" + err);\r\n                                })\r\n                        })\r\n                        .catch(error=>{\r\n                            console.log('failed at deleting last user' + error)\r\n                        });\r\n                }\r\n            })\r\n            .catch(e=>{\r\n                console.log('Failed at deleting group' + e)\r\n            });\r\n            sender.sendResponse(sender.SUCCESS_STATUS, {status:'success',message:'User deleted from group successfully'}, res)\r\n        })\r\n        .catch(e => {\r\n            sender.sendResponse(sender.BAD_REQUEST, {status:'success',message:'Error while deleting user from group'}, res);\r\n            console.log(e);\r\n        })\r\n});\r\n\r\nrouter.get('/userFriends/:user_id/', function (req, res) {\r\n    console.log(\"GET /userFriends/:user_id/\");\r\n\r\n    let user_id = req.params.user_id;\r\n    let userFriendList = {\r\n        friendlist : []\r\n    };\r\n\r\n    _getUserFriendList(user_id)\r\n        .then(response => {\r\n            userFriendList.friendlist = response.data.data;\r\n\r\n            console.log('userAccessToken : ' + facebookdata.userAccessToken);\r\n            \r\n            console.log('userFriendList : ' + userFriendList);\r\n\r\n            sender.sendResponse(sender.SUCCESS_STATUS, userFriendList, res)\r\n        })\r\n        .catch(error => {\r\n        console.log(error)\r\n    });\r\n});\r\n\r\nconst _getUserFriendList = (user_id) => {\r\n    let userFriendListRequest = {\r\n        redirectURI: 'https://graph.facebook.com/v2.11/',\r\n        userAccessToken: facebookdata.userAccessToken,\r\n        userID: user_id\r\n    };\r\n\r\n    return axios.get(userFriendListRequest.redirectURI + userFriendListRequest.userID + '/friends?access_token=' + userFriendListRequest.userAccessToken)\r\n};\r\n\r\nmodule.exports = router;\r\n"]}